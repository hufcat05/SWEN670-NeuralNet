/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.neural.net.gui;

import java.io.File;
import java.util.List;

import javax.swing.JFileChooser;

import com.neural.net.NeuralNetController;
import com.neural.net.model.DataPoint;

/**
 *
 * @author Standard
 */
public class NeuralInterface extends javax.swing.JFrame {
	
	private static NeuralNetController controller;
    /**
     * Creates new form NeuralInterface
     */
    public NeuralInterface() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblStatusHead = new javax.swing.JLabel();
        lblStatusData = new javax.swing.JLabel();
        btnTrain = new javax.swing.JButton();
        btnProcess = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblStatusHead.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblStatusHead.setText("Status:");
        lblStatusHead.setName("jLblStatusHead"); // NOI18N

        lblStatusData.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblStatusData.setText("Ready to Train");
        lblStatusData.setName("jLblStatus"); // NOI18N

        btnTrain.setText("Train");
        btnTrain.setName("jBtnTrain"); // NOI18N
        btnTrain.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnTrainMouseClicked(evt);
            }
        });

        btnProcess.setText("Process");
        btnProcess.setEnabled(false);
        btnProcess.setName("jBtnProcess"); // NOI18N
        btnProcess.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnProcessMouseClicked(evt);
            }
        });

        lblTitle.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblTitle.setText("Neural Network Java Implementation 1.0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnProcess)
                    .addComponent(btnTrain)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblStatusHead)
                        .addGap(18, 18, 18)
                        .addComponent(lblStatusData)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addComponent(lblTitle)
                .addGap(37, 37, 37))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStatusHead)
                    .addComponent(lblStatusData))
                .addGap(47, 47, 47)
                .addComponent(btnTrain)
                .addGap(36, 36, 36)
                .addComponent(btnProcess)
                .addGap(28, 28, 28))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnTrainMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnTrainMouseClicked
        // TODO add your handling code here:
        JFileChooser trainFile = new JFileChooser();
        trainFile.setDialogTitle("Choose a training file.");
        
        int returnVal = trainFile.showOpenDialog(NeuralInterface.this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            File file = trainFile.getSelectedFile();

            try
            {
            	lblStatusData.setText("Training.");
               controller.initializeTraining(file);
            }
            catch(Exception ex)
            {
                //Not a data file!
                return;
            }
            
     
            lblStatusData.setText("Ready to Process.");
            btnProcess.setEnabled(true);
            
        }
            
        
        
    }//GEN-LAST:event_btnTrainMouseClicked

    private void btnProcessMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnProcessMouseClicked
        
        JFileChooser dataFile = new JFileChooser();
        dataFile.setDialogTitle("Choose a data file to process.");
      
        
        int returnVal = dataFile.showOpenDialog(NeuralInterface.this);   
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
        	File inputFile = dataFile.getSelectedFile();
        	
        	 lblStatusData.setText("Processing.");
             
             try //to process
             {
                 List<DataPoint> outputDataPoints = controller.processInput(inputFile);
                 
                 for (DataPoint point : outputDataPoints){
                	 System.out.println("Name: " + point.getName() + " - Expected: " + point.getStatus());
                	 System.out.println("Name: " + point.getName() + " - Result: " + point.getResult());
                 }
             }
             catch(Exception ex)
             {
                 
                 //when done, pass or fail, reset label
                 lblStatusData.setText("Ready To Process.");
             }
             
        }
      
        //if it parses, start processing
        
       
        //successful process.
        lblStatusData.setText("Ready To Process.");
        
    }//GEN-LAST:event_btnProcessMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
    	controller = new NeuralNetController();
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NeuralInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NeuralInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NeuralInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NeuralInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NeuralInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnProcess;
    private javax.swing.JButton btnTrain;
    private javax.swing.JLabel lblStatusData;
    private javax.swing.JLabel lblStatusHead;
    private javax.swing.JLabel lblTitle;
    // End of variables declaration//GEN-END:variables
}
